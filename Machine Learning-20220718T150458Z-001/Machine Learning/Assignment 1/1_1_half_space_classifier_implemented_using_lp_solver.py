# -*- coding: utf-8 -*-
"""1.1 Half Space classifier implemented using LP solver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cy4QqV1A3EueYOGquV7qTyRgjsG9KW02
"""

from sklearn.preprocessing import MinMaxScaler
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from scipy.optimize import linprog
import random

data = pd.read_csv("Prostate_Cancer.csv")
data.head()
data.drop(['id'], axis=1, inplace=True)
data.diagnosis_result = [1 if each == "M" else -1 for each in data.diagnosis_result]
Y = data.diagnosis_result.values
X_data = data.drop(['diagnosis_result'], axis=1)
X = (X_data -np.min(X_data))/(np.max(X_data)-np.min(X_data)).values
X.head()

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=42)

# Using LP solver
u = np.zeros(8)  # c
v = np.ones(70)
Z = X_train

for x, y in zip(Z, Y_train):
    x = y*x
    
zz = Z.to_numpy()[0:70]
print(u.shape)
print(zz.shape)
print(v.shape)
res = linprog(u, A_ub=zz, b_ub=v) #w

#Required Hyperplane
w = res.x
print(w)

Y_pred=Y_test

print(Y_pred)
accuracy = 0

# Calculating and Printing Accuracy
for x, y, y1 in zip(X_test.to_numpy()[0:30],Y_pred, Y_test):
  if (np.dot(x,w)>=0):
    y=1
  else:
    y=-1
  if y==y1:
    accuracy += 1

print("Calculating Accuracy using program written for Half Space classifier implemented using LP solver")
print(f"Accuracy = {accuracy / len(Y_pred)}")

# using LogisticRegression from sklearn
from sklearn import linear_model
logreg = linear_model.LogisticRegression(random_state = 42,max_iter= 350)
print("Accuracy using package : {} ".format(logreg.fit(X_train, Y_train).score(X_test, Y_test)))